name: Publish Nightly Build to TestPyPI

on:
  push:
    branches: ["test-nightly"]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      # Grant write permission ONLY to this job to modify pyproject.toml
      contents: write

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.x"
      - name: Create dynamic nightly version
        run: |
          # Extract the base version from pyproject.toml (e.g., "0.5.0")
          BASE_VERSION=$(cat pyproject.toml | grep -oP 'version = "\K[^"]+')

          # Create a date-based suffix (e.g., ".dev20250707222204")
          NIGHTLY_SUFFIX=".dev$(date +'%Y%m%d%H%M%S')"

          # Combine them into the full nightly version (e.g., "0.5.0.dev20250707222204")
          NIGHTLY_VERSION="$BASE_VERSION$NIGHTLY_SUFFIX"

          echo "Setting package version to: $NIGHTLY_VERSION"

          # Update the version in pyproject.toml
          sed -i "s/version = \"$BASE_VERSION\"/version = \"$NIGHTLY_VERSION\"/" pyproject.toml
      - name: Build release distributions
        run: |
          # NOTE: put your own distribution build steps here.
          python -m pip install build
          python -m build

      - name: Upload distributions
        uses: actions/upload-artifact@v4
        with:
          name: release-dists
          path: dist/

  publish:
    runs-on: ubuntu-latest
    needs:
      - build
    permissions:
      # This permission is mandatory for trusted publishing.
      id-token: write

    # Dedicated environments with protections for publishing are strongly recommended.
    # For more information, see: https://docs.github.com/en/actions/deployment/targeting-different-environments/using-environments-for-deployment#deployment-protection-rules
    environment:
      name: testpypi
      # OPTIONAL: uncomment and update to include your PyPI project URL in the deployment status:
      # url: https://pypi.org/p/YOURPROJECT
      #
      # ALTERNATIVE: if your GitHub Release name is the PyPI project version string
      # ALTERNATIVE: exactly, uncomment the following line instead:
      # url: https://pypi.org/project/YOURPROJECT/${{ github.event.release.name }}

    steps:
      - name: Retrieve release distributions
        uses: actions/download-artifact@v4
        with:
          name: release-dists
          path: dist/

      - name: Publish release distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist/
          repository-url: https://test.pypi.org/legacy/
